FUNCIONES INCLUIDAS:

- isalpha: Recibe un caracter y devuelve 1 si es una letra (mayus y minus), o de lo contrario devuelve 0;

- isdigit: Recibe un caracter y devuelve 1 si es un digito (del 0 al 9), o de lo contrario devuelve un 0;

- isalnum: Recibe un caracter y devuelve 1 si es un digito o letra, o de lo contrario devuelve un 0;

- isascii: Recibe un caracter y devuelve 1 si es un caracter de la tabla ascii, de lo contrario devuelve un 0;

- isprint: Recibe un caracter y devuelve 1 si es printable, de lo contrario devuelve un 0;

- strlen: Recibe un string, y devuelve el numero de caracteres del que esta compuesto;

- memset: Recibe un puntero de memoria, un caracter en forma de int (c) y un indice (size_t), y llena con "c" las "n" posiciones del string;

- bzero: Recibe un puntero de memoria y un indice (size_t), y vacia las n posiciones con un '\0';

- memcpy: Recibe un puntero de destino, otro origen, y un indice (size_t), y va a copiar a partir del puntero destino "n" bytes del origen, no gestiona overlap de memoria

- memmove: Recibe un puntero de destino, otro origen, y un indice (size_t), y va a copiar a partir del puntero destino "n" bytes del origen, si gestiona overlap de memoria

- strlcpy: Recibe un string destino, uno origen, y un indice (size_t), y va a copiar "n" - 1 (añade \0) caracteres del str origen al destino.

- strlcat: Recibe un string destino, uno origen y un indice (size_t), y va a concatenar el string destino seguido del origen y el string total de destino sera el size, si el size es 0 devuelve el valor size_src,
		si el valor de size es mayor que el size_dst va a devolver size_src + size_dst, en cambio si el size es menor que el size_dst va a devolver size_src + size;
- toupper: Recibe un char, y si es una letra minus la convierte en mayus;

- tolower: Recibe un char, y si es una letra mayus la convierte en minus;

- strchr: Recibe un puntero char y un int, y debe encontrar la primera coincidencia a partir del puntero, devuelve la posicion si lo encuentra el char en el string o 0 si no;

- strrchr: Recibe un puntero char y un int, y debe encontrar la ultima coincidencia a partir del puntero, devuelve la posicion si lo encuentra el char en el string o 0 si no;

- strncmp: Recibe dos strings y un size_t, debe comparar los strings hasta size_t, devuelve un valor diferente de 0 si no son iguales;

- memchr: Recibe un puntero un int y un size_t, y hace lo mismo que strchr;

- memcmp: Recibe dos punteros y un size_t, y hace lo mismo que strncmp;

- strnstr: Recibe dos strigs y un size_t, y debe encontrar el segundo string dentro el primero sin buscar del primero mas de n bytes;

- atoi: Recibe un string de chars, y si cumple con las condiciones transforma el numero en string a int;

- calloc: Recibe un size_t como tamaño de almacenamiento y otro stize_t como cantidad a almacenar, y crea un malloc de esos tamaños lleno de '\0';

- strdup: Recibe un *s, y debe crear un string null-terminated malloc igual que el s;

- strspn: Calculate the length of the starting segment in the strin s that consists entirely of bytes in accept;

- strrspn: Calculate the length of the ending segment in the strin s that consists entirely of bytes in regect;

- ft_substr: Reserva con malloc(3) memoria para devolver una string nueva basada en la string ’s’. La nueva string empieza en el índice ’start’ y tiene una longitud máxima ’len’;

- ft_strjoin: Reserva con malloc(3) una nueva string, basada en la unión de las dos strings dadas como parámetros;

- ft_strtrim: Reserva con malloc(3) y devuelve una copia de ’s1’ con los caracteres dados en ’set’ eliminados tanto del principio como del final;

- ft_strmapi: Aplica la función ’f’ a cada caracter de la string ’s’ para crear la nueva string, resultado de aplicar sucesivas veces ’f’ (utilizando malloc(3)). A esta función se le pasará el índice del caracter iterado;

- ft_striteri: Aplica la función ’f’ a cada caracter de la string dada como argumento, pasando su índice como primer argumento. Cada caracter se pasa como una dirección a ’f’, por si hace falta modificarlo;